import os
import time
import signal
import syslog
import pytest
import traceback
from threading import Thread
from click.testing import CliRunner
from hydrachain import app
from pyethapp.rpc_client import JSONRPCClient
from requests.exceptions import ConnectionError

# 'Voting' contract: http://solidity.readthedocs.org/en/latest/solidity-by-example.html#voting
# Compiled with https://chriseth.github.io/browser-solidity/
solidity_bytecode = """
606060405260405161093b38038061093b833981016040528080518201919060200150505b600033600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550600160016000506000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060000160005081905550600090505b815181101561019757600260005080548060010182818154818355818115116101235760020281600202836000526020600020918201910161012291906100f5565b8082111561011e57600060008201600050600090556001820160005060009055506001016100f5565b5090565b5b5050509190906000526020600020906002020160005b60406040519081016040528086868151811015610002579060200190602002015181526020016000815260200150909190915060008201518160000160005055602082015181600101600050555050505b80806001019150506100b3565b5b5050610793806101a86000396000f36060604052361561007f576000357c0100000000000000000000000000000000000000000000000000000000900480630121b93f14610081578063013cf08b146100995780632e4176cf146100cc5780635c19a95c14610105578063609ff1bd1461011d5780639e7b8d6114610140578063a3ec138d146101585761007f565b005b6100976004808035906020019091905050610583565b005b6100af6004808035906020019091905050610759565b604051808381526020018281526020019250505060405180910390f35b6100d960048050506106cd565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61011b6004808035906020019091905050610291565b005b61012a6004805050610639565b6040518082815260200191505060405180910390f35b61015660048080359060200190919050506101af565b005b61016e60048080359060200190919050506106f3565b604051808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390f35b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415806102485750600160005060008273ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160009054906101000a900460ff165b1561025257610002565b6001600160005060008373ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050819055505b50565b60006000600160005060003373ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005091508160010160009054906101000a900460ff16156102e257610002565b5b600073ffffffffffffffffffffffffffffffffffffffff16600160005060008573ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156103f057503373ffffffffffffffffffffffffffffffffffffffff16600160005060008573ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b1561045157600160005060008473ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16925082506102e3565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561048a57610002565b60018260010160006101000a81548160ff02191690830217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550600160005060008473ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090508060010160009054906101000a900460ff161561056157816000016000505460026000508260020160005054815481101561000257906000526020600020906002020160005b5060010160008282825054019250508190555061057d565b8160000160005054816000016000828282505401925050819055505b5b505050565b6000600160005060003373ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090508060010160009054906101000a900460ff16156105d257610002565b60018160010160006101000a81548160ff021916908302179055508181600201600050819055508060000160005054600260005083815481101561000257906000526020600020906002020160005b506001016000828282505401925050819055505b5050565b60006000600060009150600090505b6002600050805490508110156106c75781600260005082815481101561000257906000526020600020906002020160005b506001016000505411156106b957600260005081815481101561000257906000526020600020906002020160005b50600101600050549150815080925082505b5b8080600101915050610648565b5b505090565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016000506020528060005260406000206000915090508060000160005054908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160005054905084565b600260005081815481101561000257906000526020600020906002020160005b91509050806000016000505490806001016000505490508256"""

def drive_test():
    def log(msg):
        #syslog.syslog(syslog.LOG_DEBUG, "[{} drive_test] {}".format(time.time(), msg))
        pass

    # Poll app until RPC interface is ready
    while True:
        try:
            client = JSONRPCClient()
            client.call('web3_clientVersion')
            break
        except ConnectionError, e:
            time.sleep(0.5)

    # Set up filter to get notified when a new block arrives
    new_block_filter_id = client.call('eth_newBlockFilter')

    # Create a contract
    client.eth_sendTransaction(sender=client.coinbase, to='', data=solidity_bytecode)

    # Wait for new block
    while True:
        block_hashes = client.call('eth_getFilterChanges', new_block_filter_id)
        time.sleep(0.5)
        if block_hashes:
            assert len(block_hashes) == 1
            recent_block_hash = block_hashes[0]
            break

    recent_block = client.call('eth_getBlockByHash', recent_block_hash, True)
    assert recent_block['transactions']

    # Stop me and CliRunner
    os.kill(os.getpid(), signal.SIGINT)


@pytest.mark.timeout(10)
def test():
    # Start thread that will communicate to app ran by CliRunner
    d = Thread(target=drive_test)
    d.setDaemon(True)
    d.start()

    runner = CliRunner()
    runner.invoke(app.pyethapp_app.app,
                  ['-d', 'datadir', '--log-file', '/tmp/hydra.log', 'runmultiple'])
                                                   # FIXME


if __name__ == '__main__':
    test()
